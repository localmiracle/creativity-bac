/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  TrackStatus as PrismaTrackStatus,
  Track as PrismaTrack,
} from "@prisma/client";

export class TrackStatusServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.TrackStatusCountArgs, "select">
  ): Promise<number> {
    return this.prisma.trackStatus.count(args);
  }

  async trackStatuses(
    args: Prisma.TrackStatusFindManyArgs
  ): Promise<PrismaTrackStatus[]> {
    return this.prisma.trackStatus.findMany(args);
  }
  async trackStatus(
    args: Prisma.TrackStatusFindUniqueArgs
  ): Promise<PrismaTrackStatus | null> {
    return this.prisma.trackStatus.findUnique(args);
  }
  async createTrackStatus(
    args: Prisma.TrackStatusCreateArgs
  ): Promise<PrismaTrackStatus> {
    return this.prisma.trackStatus.create(args);
  }
  async updateTrackStatus(
    args: Prisma.TrackStatusUpdateArgs
  ): Promise<PrismaTrackStatus> {
    return this.prisma.trackStatus.update(args);
  }
  async deleteTrackStatus(
    args: Prisma.TrackStatusDeleteArgs
  ): Promise<PrismaTrackStatus> {
    return this.prisma.trackStatus.delete(args);
  }

  async getTrack(parentId: string): Promise<PrismaTrack | null> {
    return this.prisma.trackStatus
      .findUnique({
        where: { id: parentId },
      })
      .track();
  }
}
