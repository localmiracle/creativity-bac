/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { TrackStatus } from "./TrackStatus";
import { TrackStatusCountArgs } from "./TrackStatusCountArgs";
import { TrackStatusFindManyArgs } from "./TrackStatusFindManyArgs";
import { TrackStatusFindUniqueArgs } from "./TrackStatusFindUniqueArgs";
import { CreateTrackStatusArgs } from "./CreateTrackStatusArgs";
import { UpdateTrackStatusArgs } from "./UpdateTrackStatusArgs";
import { DeleteTrackStatusArgs } from "./DeleteTrackStatusArgs";
import { Track } from "../../track/base/Track";
import { TrackStatusService } from "../trackStatus.service";
@graphql.Resolver(() => TrackStatus)
export class TrackStatusResolverBase {
  constructor(protected readonly service: TrackStatusService) {}

  async _trackStatusesMeta(
    @graphql.Args() args: TrackStatusCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TrackStatus])
  async trackStatuses(
    @graphql.Args() args: TrackStatusFindManyArgs
  ): Promise<TrackStatus[]> {
    return this.service.trackStatuses(args);
  }

  @graphql.Query(() => TrackStatus, { nullable: true })
  async trackStatus(
    @graphql.Args() args: TrackStatusFindUniqueArgs
  ): Promise<TrackStatus | null> {
    const result = await this.service.trackStatus(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TrackStatus)
  async createTrackStatus(
    @graphql.Args() args: CreateTrackStatusArgs
  ): Promise<TrackStatus> {
    return await this.service.createTrackStatus({
      ...args,
      data: {
        ...args.data,

        track: args.data.track
          ? {
              connect: args.data.track,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => TrackStatus)
  async updateTrackStatus(
    @graphql.Args() args: UpdateTrackStatusArgs
  ): Promise<TrackStatus | null> {
    try {
      return await this.service.updateTrackStatus({
        ...args,
        data: {
          ...args.data,

          track: args.data.track
            ? {
                connect: args.data.track,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TrackStatus)
  async deleteTrackStatus(
    @graphql.Args() args: DeleteTrackStatusArgs
  ): Promise<TrackStatus | null> {
    try {
      return await this.service.deleteTrackStatus(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Track, {
    nullable: true,
    name: "track",
  })
  async getTrack(@graphql.Parent() parent: TrackStatus): Promise<Track | null> {
    const result = await this.service.getTrack(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
