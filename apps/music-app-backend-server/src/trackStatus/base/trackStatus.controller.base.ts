/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TrackStatusService } from "../trackStatus.service";
import { TrackStatusCreateInput } from "./TrackStatusCreateInput";
import { TrackStatus } from "./TrackStatus";
import { TrackStatusFindManyArgs } from "./TrackStatusFindManyArgs";
import { TrackStatusWhereUniqueInput } from "./TrackStatusWhereUniqueInput";
import { TrackStatusUpdateInput } from "./TrackStatusUpdateInput";

export class TrackStatusControllerBase {
  constructor(protected readonly service: TrackStatusService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TrackStatus })
  async createTrackStatus(
    @common.Body() data: TrackStatusCreateInput
  ): Promise<TrackStatus> {
    return await this.service.createTrackStatus({
      data: {
        ...data,

        track: data.track
          ? {
              connect: data.track,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        status: true,

        track: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [TrackStatus] })
  @ApiNestedQuery(TrackStatusFindManyArgs)
  async trackStatuses(@common.Req() request: Request): Promise<TrackStatus[]> {
    const args = plainToClass(TrackStatusFindManyArgs, request.query);
    return this.service.trackStatuses({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        status: true,

        track: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TrackStatus })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async trackStatus(
    @common.Param() params: TrackStatusWhereUniqueInput
  ): Promise<TrackStatus | null> {
    const result = await this.service.trackStatus({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        status: true,

        track: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TrackStatus })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTrackStatus(
    @common.Param() params: TrackStatusWhereUniqueInput,
    @common.Body() data: TrackStatusUpdateInput
  ): Promise<TrackStatus | null> {
    try {
      return await this.service.updateTrackStatus({
        where: params,
        data: {
          ...data,

          track: data.track
            ? {
                connect: data.track,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          status: true,

          track: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TrackStatus })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTrackStatus(
    @common.Param() params: TrackStatusWhereUniqueInput
  ): Promise<TrackStatus | null> {
    try {
      return await this.service.deleteTrackStatus({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          status: true,

          track: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
