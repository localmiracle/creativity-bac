/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Studio } from "./Studio";
import { StudioCountArgs } from "./StudioCountArgs";
import { StudioFindManyArgs } from "./StudioFindManyArgs";
import { StudioFindUniqueArgs } from "./StudioFindUniqueArgs";
import { CreateStudioArgs } from "./CreateStudioArgs";
import { UpdateStudioArgs } from "./UpdateStudioArgs";
import { DeleteStudioArgs } from "./DeleteStudioArgs";
import { StudioService } from "../studio.service";
@graphql.Resolver(() => Studio)
export class StudioResolverBase {
  constructor(protected readonly service: StudioService) {}

  async _studiosMeta(
    @graphql.Args() args: StudioCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Studio])
  async studios(@graphql.Args() args: StudioFindManyArgs): Promise<Studio[]> {
    return this.service.studios(args);
  }

  @graphql.Query(() => Studio, { nullable: true })
  async studio(
    @graphql.Args() args: StudioFindUniqueArgs
  ): Promise<Studio | null> {
    const result = await this.service.studio(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Studio)
  async createStudio(@graphql.Args() args: CreateStudioArgs): Promise<Studio> {
    return await this.service.createStudio({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Studio)
  async updateStudio(
    @graphql.Args() args: UpdateStudioArgs
  ): Promise<Studio | null> {
    try {
      return await this.service.updateStudio({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Studio)
  async deleteStudio(
    @graphql.Args() args: DeleteStudioArgs
  ): Promise<Studio | null> {
    try {
      return await this.service.deleteStudio(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
