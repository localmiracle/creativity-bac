/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { StudioService } from "../studio.service";
import { StudioCreateInput } from "./StudioCreateInput";
import { Studio } from "./Studio";
import { StudioFindManyArgs } from "./StudioFindManyArgs";
import { StudioWhereUniqueInput } from "./StudioWhereUniqueInput";
import { StudioUpdateInput } from "./StudioUpdateInput";

export class StudioControllerBase {
  constructor(protected readonly service: StudioService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Studio })
  async createStudio(@common.Body() data: StudioCreateInput): Promise<Studio> {
    return await this.service.createStudio({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        location: true,
        contactInfo: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Studio] })
  @ApiNestedQuery(StudioFindManyArgs)
  async studios(@common.Req() request: Request): Promise<Studio[]> {
    const args = plainToClass(StudioFindManyArgs, request.query);
    return this.service.studios({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        location: true,
        contactInfo: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Studio })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async studio(
    @common.Param() params: StudioWhereUniqueInput
  ): Promise<Studio | null> {
    const result = await this.service.studio({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        location: true,
        contactInfo: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Studio })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateStudio(
    @common.Param() params: StudioWhereUniqueInput,
    @common.Body() data: StudioUpdateInput
  ): Promise<Studio | null> {
    try {
      return await this.service.updateStudio({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          location: true,
          contactInfo: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Studio })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteStudio(
    @common.Param() params: StudioWhereUniqueInput
  ): Promise<Studio | null> {
    try {
      return await this.service.deleteStudio({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          location: true,
          contactInfo: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
